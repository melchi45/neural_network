cmake_minimum_required(VERSION 2.8)

set ( PROJECT_NAME neural_network )
set ( ADALINE_EXAMPLE1 adaline_example1 )
set ( ADALINE_EXAMPLE2 adaline_example2 )
set ( BACKPROPAGATION_EXAMPLE1 backpropagation_example1 )
set ( BACKPROPAGATION_EXAMPLE2 backpropagation_example2 )
set ( EPOCH_BACKPROPAGATION_APPLICATION epoch_backpropagation_application )
set ( SON_EXAMPLE1 son_example1 )

project( ${PROJECT_NAME} )
set ( ${PROJECT_NAME}_HOME ${CMAKE_CURRENT_SOURCE_DIR} )
message("SourceDir: " ${${PROJECT_NAME}_HOME} )

if ( CMAKE_COMPILER_IS_GNUCXX )
   set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive" )
endif ()

# set compiler support for C++11 standard
option(USE_CXX11_STD "Product should be build with C++11 compiler option enabled" ON)

if(USE_CXX11_STD)
    set(CMAKE_CXX_STANDARD 11)
endif()

if(MSVC)
	add_definitions(-D_CONSOLE)
else()
    # GCC or Clang
endif()

# use standard file endings - rename to cxx if needed
set(CXX_SRC_EXT_PATTERN ".cpp")
set(C_SRC_EXT_PATTERN ".c")
set(HDR_EXT_PATTERN ".h")

# get all *.cpp files from src to build target
file(GLOB SRC_FILES ${PROJECT_SOURCE_DIR}/src/*${CXX_SRC_EXT_PATTERN} ${PROJECT_SOURCE_DIR}/src/*${C_SRC_EXT_PATTERN})
file(GLOB HDR_FILES ${PROJECT_SOURCE_DIR}/src/*${HDR_EXT_PATTERN})
# makes source and header files group
source_group("Source Files" FILES ${SRC_FILES})
source_group("Header Files" FILES ${HDR_FILES})

include_directories( ${ADALINE_EXAMPLE1} PRIVATE ${PROJECT_SOURCE_DIR}/src )

# build target
add_executable(${ADALINE_EXAMPLE1} ${PROJECT_SOURCE_DIR}/${ADALINE_EXAMPLE1}/${ADALINE_EXAMPLE1}.cpp ${SRC_FILES} ${HDR_FILES})
add_executable(${ADALINE_EXAMPLE2} ${PROJECT_SOURCE_DIR}/${ADALINE_EXAMPLE2}/${ADALINE_EXAMPLE2}.cpp ${SRC_FILES} ${HDR_FILES})
add_executable(${BACKPROPAGATION_EXAMPLE1} ${PROJECT_SOURCE_DIR}/${BACKPROPAGATION_EXAMPLE1}/${BACKPROPAGATION_EXAMPLE1}.cpp ${SRC_FILES} ${HDR_FILES})
add_executable(${BACKPROPAGATION_EXAMPLE2} ${PROJECT_SOURCE_DIR}/${BACKPROPAGATION_EXAMPLE2}/${BACKPROPAGATION_EXAMPLE2}.cpp ${SRC_FILES} ${HDR_FILES})
add_executable(${EPOCH_BACKPROPAGATION_APPLICATION} ${PROJECT_SOURCE_DIR}/${EPOCH_BACKPROPAGATION_APPLICATION}/${EPOCH_BACKPROPAGATION_APPLICATION}.cpp ${SRC_FILES} ${HDR_FILES})
add_executable(${SON_EXAMPLE1} ${PROJECT_SOURCE_DIR}/${SON_EXAMPLE1}/${SON_EXAMPLE1}.cpp ${SRC_FILES} ${HDR_FILES})

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/lin2var.trn
     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
	 
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/adaline1.net
     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
	 
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/adaline2.net
     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/test.dta
     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/bp1.net
     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/iris.dat
     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
	 
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/cross.dat
     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

add_custom_command (
    TARGET ${ADALINE_EXAMPLE1}
    POST_BUILD
    COMMAND ${ADALINE_EXAMPLE1}
    COMMENT "Execute ${ADALINE_EXAMPLE1}"
)

add_custom_command (
    TARGET ${ADALINE_EXAMPLE2}
    POST_BUILD
    COMMAND ${ADALINE_EXAMPLE2}
    COMMENT "Execute ${ADALINE_EXAMPLE2}"
)

add_custom_command (
    TARGET ${BACKPROPAGATION_EXAMPLE1}
    POST_BUILD
    COMMAND ${BACKPROPAGATION_EXAMPLE1}
    COMMENT "Execute ${BACKPROPAGATION_EXAMPLE1}"
)

add_custom_command (
    TARGET ${BACKPROPAGATION_EXAMPLE2}
    POST_BUILD
    COMMAND ${BACKPROPAGATION_EXAMPLE2}
    COMMENT "Execute ${BACKPROPAGATION_EXAMPLE2}"
)

add_custom_command (
    TARGET ${EPOCH_BACKPROPAGATION_APPLICATION}
    POST_BUILD
    COMMAND ${EPOCH_BACKPROPAGATION_APPLICATION}
    COMMENT "Execute ${EPOCH_BACKPROPAGATION_APPLICATION}"
)

add_custom_command (
    TARGET ${SON_EXAMPLE1}
    POST_BUILD
    COMMAND ${SON_EXAMPLE1}
    COMMENT "Execute ${SON_EXAMPLE1}"
)